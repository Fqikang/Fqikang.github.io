<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>thymeleaf</title>
      <link href="/2020/05/10/thymeleaf/"/>
      <url>/2020/05/10/thymeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h2><a id="more"></a><h4 id="1、简单表达式"><a href="#1、简单表达式" class="headerlink" title="1、简单表达式"></a>1、简单表达式</h4><p>变量表达式：${…}</p><p>选择变量表达式：*{…}</p><p>消息表达式：#{…}</p><p>链接URL表达式：@{…}</p><p>片段表达式：~{。。。}</p><h4 id="2-文字"><a href="#2-文字" class="headerlink" title="2.文字"></a>2.文字</h4><p>文本文字：’one text’,’Another one’</p><p>号码文字：0 , 34 , 3.0 , 12.3</p><p>布尔文字：true,false</p><p>空文字：null</p><p>文字标记：one, sometext , main …</p><h4 id="3-文字操作"><a href="#3-文字操作" class="headerlink" title="3.文字操作"></a>3.文字操作</h4><p>字符串连接：+</p><p>文字替换：|The name is ${name}|</p><h4 id="4-算术运算"><a href="#4-算术运算" class="headerlink" title="4.算术运算"></a>4.算术运算</h4><p>二元运算符：+， ，-， *， /，%</p><p>减号（一元运算符）：-</p><h4 id="5-布尔运算："><a href="#5-布尔运算：" class="headerlink" title="5.布尔运算："></a>5.布尔运算：</h4><p>二元运算：and，or</p><p>布尔否定（一元运算符）：！，not</p><h4 id="6-比较和相等"><a href="#6-比较和相等" class="headerlink" title="6.比较和相等"></a>6.比较和相等</h4><p>比较符：&gt;，&lt;，&gt;=，&lt;=(gt，lt，ge，le)</p><p>等号运算符：==，!=（eq,ne）</p><h4 id="7-条件运算符"><a href="#7-条件运算符" class="headerlink" title="7.条件运算符"></a>7.条件运算符</h4><p>如果-则: (if)?(then)</p><p>如果-则-否则:  (if)?(then):(else)</p><p>默认:  (value)？：(defaultvalue)</p><h4 id="8-特别符号"><a href="#8-特别符号" class="headerlink" title="8.特别符号:"></a>8.特别符号:</h4><p>无操作符：_</p><h3 id="所有这些功能都可以组合和嵌套："><a href="#所有这些功能都可以组合和嵌套：" class="headerlink" title="所有这些功能都可以组合和嵌套："></a>所有这些功能都可以组合和嵌套：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">'User is of type '+($&#123;user.isAdmin()&#125; ?'Administrator':($&#123;user.type&#125;?:'Unknown'))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot初探</title>
      <link href="/2020/05/10/springboot%E5%88%9D%E6%8E%A2/"/>
      <url>/2020/05/10/springboot%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="初探SpringBoot参考指南（持续更新）"><a href="#初探SpringBoot参考指南（持续更新）" class="headerlink" title="初探SpringBoot参考指南（持续更新）"></a>初探SpringBoot参考指南（持续更新）</h1><a id="more"></a><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">官方文档</a></p></blockquote><h2 id="1-Spring-MVC"><a href="#1-Spring-MVC" class="headerlink" title="1.Spring  MVC"></a>1.Spring  MVC</h2><p>Spring MVC lets you create special <code>@Controller</code> or <code>@RestController</code> beans to handle incoming HTTP requests. Methods in your controller are mapped to HTTP using <code>@RequestMapping</code> annotations.</p><ul><li>通过使用@Controller 或者 @RestController 容器注解来处理HTTP请求。</li></ul><p>Here is a typical example <code>@RestController</code> to serve JSON data:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRestController</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;user&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long user)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解读：</p><ol><li><p>@RestController等同于@Controller+@ResponseBody</p><p>在一个类上添加@Controller，标明这个类似控制类。</p><blockquote><p>@ResponseBody表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。</p><p>　　格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。</p><p>如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。</p></blockquote></li><li><p>@RestMapping是用来映射请求的，即标明用来处理哪些URL请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>  <span class="comment">//控制类</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)  <span class="comment">//标明用来处理/user请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span></span></span><br><span class="line"><span class="class"></span>&#123;         </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/users"</span>) <span class="comment">//标明用来处理/users请求</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">users</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"users"</span>;  <span class="comment">//返回users字符串，如果静态文件夹下有user.html文件，springboot会自动渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        　此时请求users方法的url路径就是：…/user/users。</p></li><li><p>@Request与@PathVariable注解的作用都是从前端获取传递到后台的参数值</p><ul><li>@PathVariable：从URI中获取参数值</li><li>@Request：从request中获取参数值</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//localhost:8060/studySSM/admin/admin/reset/4?userType=1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/reset/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">resetPwd</span><span class="params">(...,</span></span></span><br><span class="line"><span class="function"><span class="params">@PathVariable(value=<span class="string">"id"</span>)</span> <span class="keyword">int</span> uid,</span></span><br><span class="line"><span class="function">        @<span class="title">RequestParam</span><span class="params">(value=<span class="string">"userType"</span>, required=<span class="keyword">false</span>)</span> <span class="keyword">int</span> type,</span></span><br><span class="line"><span class="function">         ...) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"uid:"</span>+ uid + <span class="string">" userType:"</span> + type);</span><br><span class="line">    <span class="comment">//打印输出 uid:4 userType:1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-SpringMvc自动配置"><a href="#1-1-SpringMvc自动配置" class="headerlink" title="1.1  SpringMvc自动配置"></a>1.1  SpringMvc自动配置</h3><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).</p><ul><li>静态文件夹路径，webjars</li></ul></li><li><p>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li><p>自动注册了<code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p></li><li><p>Converter：转换器；  public String hello(User user)：类型转换使用Converter</p></li><li><p><code>Formatter</code>  格式化器；  2017.12.17===Date；</p></li></ul></li><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).</p><ul><li>定义错误代码生成规则</li></ul></li><li><p>Static <code>index.html</code> support.</p></li><li><p>Custom <code>Favicon</code> support (see below).</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><ul><li>我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）</li></ul></li></ul><hr><p><strong>==编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc==</strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// super.addViewControllers(registry);</span></span><br><span class="line">        <span class="comment">//浏览器发送 /xxx 请求来到 xxxx</span></span><br><span class="line">        registry.addViewController(<span class="string">"/xxx"</span>).setViewName(<span class="string">"xxxx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-EnableWebMvc全面接管Springmvc"><a href="#1-2-EnableWebMvc全面接管Springmvc" class="headerlink" title="1.2@EnableWebMvc全面接管Springmvc"></a>1.2@EnableWebMvc全面接管Springmvc</h3><p>尚是小白，不建议全面接管。</p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇blog</title>
      <link href="/2020/05/06/blog01/"/>
      <url>/2020/05/06/blog01/</url>
      
        <content type="html"><![CDATA[<h1 id="一、基于hexo框架的个人博客（静态）"><a href="#一、基于hexo框架的个人博客（静态）" class="headerlink" title="一、基于hexo框架的个人博客（静态）"></a>一、基于hexo框架的个人博客（静态）</h1><a id="more"></a><h2 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h2><h4 id="1-下载并安装node-js"><a href="#1-下载并安装node-js" class="headerlink" title="1.下载并安装node.js"></a>1.下载并安装node.js</h4><blockquote><p><a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p></blockquote><p><img src="/.com//20200506175849.png" alt></p><p>命令行输入node -v，出现版本号即安装成功。</p><h4 id="2-通过node-js默认的包管理工具npm下载hexo框架，由于npm下载慢，所以先通过npm下载cnpm。"><a href="#2-通过node-js默认的包管理工具npm下载hexo框架，由于npm下载慢，所以先通过npm下载cnpm。" class="headerlink" title="2.通过node.js默认的包管理工具npm下载hexo框架，由于npm下载慢，所以先通过npm下载cnpm。"></a>2.通过node.js默认的包管理工具npm下载hexo框架，由于npm下载慢，所以先通过npm下载cnpm。</h4><p><img src="/.com//20200506180903.png" alt></p><h4 id="3-选择一个路径建立一个空的文件夹，存放blog"><a href="#3-选择一个路径建立一个空的文件夹，存放blog" class="headerlink" title="3.选择一个路径建立一个空的文件夹，存放blog"></a>3.选择一个路径建立一个空的文件夹，存放blog</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><h4 id="4-使用hexo生成博客"><a href="#4-使用hexo生成博客" class="headerlink" title="4.使用hexo生成博客"></a>4.使用hexo生成博客</h4><p>hexo init 初始化一个博客</p><p><img src="/.com//20200506181750.png" alt></p><h4 id="5-启动hexo"><a href="#5-启动hexo" class="headerlink" title="5.启动hexo"></a>5.启动hexo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>默认在4000端口启动</p><p><img src="/.com//20200506182102.png" alt></p><h4 id="6-通过浏览器访问"><a href="#6-通过浏览器访问" class="headerlink" title="6.通过浏览器访问"></a>6.通过浏览器访问</h4><p><img src="/.com//20200506182326.png" alt></p><h4 id="7-新建博客"><a href="#7-新建博客" class="headerlink" title="7.新建博客"></a>7.新建博客</h4><p>默认使用markdown格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">"我的第一篇博客"</span></span><br></pre></td></tr></table></figure><p><img src="/.com//20200506182849.png" alt></p><h4 id="8-退回到blog目录，清理、生成hexo-再次启动，博客就更新完成"><a href="#8-退回到blog目录，清理、生成hexo-再次启动，博客就更新完成" class="headerlink" title="8.退回到blog目录，清理、生成hexo,再次启动，博客就更新完成"></a>8.退回到blog目录，清理、生成hexo,再次启动，博客就更新完成</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ../..    <span class="comment">//退两级目录</span></span><br><span class="line">hexo clean  <span class="comment">//清理</span></span><br><span class="line">hexo g      <span class="comment">//生成    </span></span><br><span class="line">hexo s      <span class="comment">//hexo启动</span></span><br></pre></td></tr></table></figure><h4 id="9-部署远端（免费github）"><a href="#9-部署远端（免费github）" class="headerlink" title="9.部署远端（免费github）"></a>9.部署远端（免费github）</h4><p>先登陆github，创建一个空仓库</p><p>然后在linux中修改 -config.yml文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim _configyml</span><br></pre></td></tr></table></figure><p>修改内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:<span class="comment">//github.com/Fqikang/Fqikang1.github.io.git</span></span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p><img src="/.com//20200506184051.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  <span class="comment">//部署到远端</span></span><br></pre></td></tr></table></figure><p>==注意：win10要先安装一个git，并先配置git bash。==</p><hr><h1 id="二、在linux（虚拟机）下命令行安装软件"><a href="#二、在linux（虚拟机）下命令行安装软件" class="headerlink" title="二、在linux（虚拟机）下命令行安装软件"></a>二、在linux（虚拟机）下命令行安装软件</h1><h3 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h3><ol><li><p>在Windows本机上下载安装文件 node-v14.1.0-linux-x64.tar.xz</p><p><img src="/.com//1.png" alt></p><p>2.用Xftp将源码包上传到linux的/opt/soft，在命令行输入：tar -xvf  node-v14.1.0-linux-x64.tar.xz进行解压。</p></li></ol><p>​        3.编辑文件  vi /etc/profile文件末添加如下,(配置node的环境变量)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NODE_HOME=/opt/soft/node-v0.10.32-linux-x64</span><br><span class="line">export PATH=$PATH:$NODE_HOME/bin</span><br><span class="line">export NODE_PATH=$NODE_HOME/lib/node_modules</span><br></pre></td></tr></table></figure><p>​        4.在命令行输入：source /etc/profile，让配置文件生效。</p><p>5.在命令行输入：node -v，查看node.js的版本。如果出现版本号则证明安装成功。如下图所示。</p><p><img src="/.com//20200506174433.png" alt></p><h3 id="2-npm与cnpm的区别"><a href="#2-npm与cnpm的区别" class="headerlink" title="2.npm与cnpm的区别"></a>2.npm与cnpm的区别</h3><p>npm:是 JavaScript 世界的包管理工具，并且是 Node.js 平台的默认包管理工具。通过 npm 可以安装、共享、分发代码，管理项目依赖关系。</p><p>cnpm:</p><blockquote><p>淘宝团队做的国内镜像，因为npm的服务器位于国外可能会影响安装。淘宝镜像与官方同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p><p>安装：命令提示符执行<br><code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p><p><code>cnpm -v</code> 来测试是否成功安装</p><p><code>-g</code>：全局安装。 将会安装在C：\ Users \ Administrator \ AppData \ Roaming \ npm，<strong>并且写入系统环境变量</strong>；非全局安装：将会安装在当前定位目录;全局安装可以通过命令行任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过要求调用;</p><p>参考链接：<a href="https://www.jianshu.com/p/115594f64b41" target="_blank" rel="noopener">https://www.jianshu.com/p/115594f64b41</a></p></blockquote><h3 id="3-hexo目录下文件夹的作用："><a href="#3-hexo目录下文件夹的作用：" class="headerlink" title="3.hexo目录下文件夹的作用："></a>3.hexo目录下文件夹的作用：</h3><p>待完成。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
